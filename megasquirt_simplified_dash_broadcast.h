/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.1.0 Sat Aug 13 19:55:59 2022.
 */

#ifndef MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_H
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH4_FRAME_ID (0x5ecu)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH3_FRAME_ID (0x5ebu)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH2_FRAME_ID (0x5eau)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH1_FRAME_ID (0x5e9u)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH0_FRAME_ID (0x5e8u)

/* Frame lengths in bytes. */
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH4_LENGTH (8u)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH3_LENGTH (8u)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH2_LENGTH (8u)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH1_LENGTH (8u)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH0_LENGTH (8u)

/* Extended or standard frame types. */
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH4_IS_EXTENDED (0)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH3_IS_EXTENDED (0)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH2_IS_EXTENDED (0)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH1_IS_EXTENDED (0)
#define MEGASQUIRT_SIMPLIFIED_DASH_BROADCAST_MEGASQUIRT_DASH0_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message megasquirt_dash4.
 *
 * All signal values are as on the CAN bus.
 */
struct megasquirt_simplified_dash_broadcast_megasquirt_dash4_t {
    /**
     * Vehicle speed 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vss1;

    /**
     * Traction control retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tc_retard;

    /**
     * Launch control timing
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t launch_timing;
};

/**
 * Signals in message megasquirt_dash3.
 *
 * All signal values are as on the CAN bus.
 */
struct megasquirt_simplified_dash_broadcast_megasquirt_dash3_t {
    /**
     * Battery voltage
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t batt;

    /**
     * Generic sensor input 1 (gpioadc0 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors1;

    /**
     * Generic sensor input 2 (gpioadc1 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors2;

    /**
     * Knock retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t knk_rtd;
};

/**
 * Signals in message megasquirt_dash2.
 *
 * All signal values are as on the CAN bus.
 */
struct megasquirt_simplified_dash_broadcast_megasquirt_dash2_t {
    /**
     * Bank 1 AFR target
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afrtgt1;

    /**
     * AFR cyl #1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr1;

    /**
     * EGO bank 1 correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egocor1;

    /**
     * EGT cyl #1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt1;

    /**
     * Sequential pulsewidth for cyl #1
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq1;
};

/**
 * Signals in message megasquirt_dash1.
 *
 * All signal values are as on the CAN bus.
 */
struct megasquirt_simplified_dash_broadcast_megasquirt_dash1_t {
    /**
     * Main pulsewidth bank 1
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pw1;

    /**
     * Main pulsewidth bank 2
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pw2;

    /**
     * Manifold air temperature
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t mat;

    /**
     * Final ignition spark advance
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv_deg;
};

/**
 * Signals in message megasquirt_dash0.
 *
 * All signal values are as on the CAN bus.
 */
struct megasquirt_simplified_dash_broadcast_megasquirt_dash0_t {
    /**
     * Manifold air pressure
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t map;

    /**
     * Engine RPM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm;

    /**
     * Coolant temperature
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t clt;

    /**
     * Throttle position
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tps;
};

/**
 * Pack message megasquirt_dash4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash4_pack(
    uint8_t *dst_p,
    const struct megasquirt_simplified_dash_broadcast_megasquirt_dash4_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_dash4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash4_unpack(
    struct megasquirt_simplified_dash_broadcast_megasquirt_dash4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t megasquirt_simplified_dash_broadcast_megasquirt_dash4_vss1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash4_vss1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash4_vss1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash4_tc_retard_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash4_tc_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash4_tc_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash4_launch_timing_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash4_launch_timing_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash4_launch_timing_is_in_range(int16_t value);

/**
 * Pack message megasquirt_dash3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash3_pack(
    uint8_t *dst_p,
    const struct megasquirt_simplified_dash_broadcast_megasquirt_dash3_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_dash3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash3_unpack(
    struct megasquirt_simplified_dash_broadcast_megasquirt_dash3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash3_batt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash3_batt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash3_batt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash3_sensors2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t megasquirt_simplified_dash_broadcast_megasquirt_dash3_knk_rtd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash3_knk_rtd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash3_knk_rtd_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_dash2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash2_pack(
    uint8_t *dst_p,
    const struct megasquirt_simplified_dash_broadcast_megasquirt_dash2_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_dash2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash2_unpack(
    struct megasquirt_simplified_dash_broadcast_megasquirt_dash2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t megasquirt_simplified_dash_broadcast_megasquirt_dash2_afrtgt1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash2_afrtgt1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash2_afrtgt1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t megasquirt_simplified_dash_broadcast_megasquirt_dash2_afr1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash2_afr1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash2_afr1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash2_egocor1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash2_egocor1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash2_egocor1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash2_egt1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash2_egt1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash2_egt1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash2_pwseq1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash2_pwseq1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash2_pwseq1_is_in_range(int16_t value);

/**
 * Pack message megasquirt_dash1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash1_pack(
    uint8_t *dst_p,
    const struct megasquirt_simplified_dash_broadcast_megasquirt_dash1_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_dash1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash1_unpack(
    struct megasquirt_simplified_dash_broadcast_megasquirt_dash1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash1_pw2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash1_mat_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash1_mat_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash1_mat_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash1_adv_deg_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash1_adv_deg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash1_adv_deg_is_in_range(int16_t value);

/**
 * Pack message megasquirt_dash0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash0_pack(
    uint8_t *dst_p,
    const struct megasquirt_simplified_dash_broadcast_megasquirt_dash0_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_dash0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int megasquirt_simplified_dash_broadcast_megasquirt_dash0_unpack(
    struct megasquirt_simplified_dash_broadcast_megasquirt_dash0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash0_map_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash0_map_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash0_map_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t megasquirt_simplified_dash_broadcast_megasquirt_dash0_rpm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash0_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash0_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash0_clt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash0_clt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash0_clt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t megasquirt_simplified_dash_broadcast_megasquirt_dash0_tps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float megasquirt_simplified_dash_broadcast_megasquirt_dash0_tps_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool megasquirt_simplified_dash_broadcast_megasquirt_dash0_tps_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
